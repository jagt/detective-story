# 调试用路线
% programmer

--
// hay!, hopefully nobody closes the window.
alert('0xFF253253 运行时错误(SIGSEGV, SEGMENT_FAULT). ');
--

...

.....

我发现，
我陷入了一个巨大的危机。

当然，这里说的“我”，
不是那个糟糕的侦探故事里的“我”，
而是在另一个时空里，
正坐在电脑屏幕前，
忧心忡忡的“我”。

你应该已经发现了,
这个愚蠢的游戏所依附的计算机程序，
出现了一些问题。
用专业的说法就是：
“程序里出现了一个 Bug。”

在外行人看来，
程序员的工作就是不断的敲击键盘，像写小说一样填写代码，
一段时间之后，程序就自然而然的写好了。

这绝对是常人对编程工作的最大误解。

现实生活中，
程序员会有将近百分之五十的时间花费在调试程序上。
抓耳挠腮，眼神呆滞，心神不宁，
当你看到一位程序员表现出这样的状态时，
他一定是遇上了 Bug。

毫无悬念的，
现在的我也是这样的状态。

--
control.clean_main();
--


经过一段时间的调试，
我基本能够确定 Bug 就隐藏在下面这段代码里。

%% codeblock

--
if (settings.code_chances) {
    settings.code_chances -= 1;
    if (settings.code_chances == 0) {
        control.jump_to('badprogrammer');
    }
}
--

1    var arr = ["第一行", "第二行", "第三行", "第四行"];
2    var funcs = {};
3    for (var ix = 0; ix < 3; ++ix) {
4        funcs[ix] = function() {
5            display(arr[ix]);
6        }
7    }
8    funcs[0]()
9    funcs[1]()
10   funcs[2]();

预计出现的结果是三行字依次都显示出来。
但实际情况却是显示了三次“第四行”。
那么问题究竟是出在了哪里...

*!settings.code0* arr 的元素太多了，在第 1 行里把 "第四行" 去掉就可以了。
*!settings.code1* 参数有的问题，在第 4 行里把 arr[ix] 作为函数传进去。
*!settings.code2* 第八第九行最后没有分号，在第 8, 9 行把分号补上就可以了。
*!settings.code3* 循环结束判断条件不对，把第 3 行里的 3 改成数组的长度 arr.length

--
if (!settings.code_chances) {
    settings.code_chances = 2;
} 

if (state.choice != 1) {
    if (state.choice == 0) {
        control.to_label("code0");
        settings.code0 = true;
    } else if (state.choice == 2) {
        control.to_label("code2");
        settings.code2 = true;
    } else if (state.choice == 3) {
        control.to_label("code3");
        settings.code3 = true;
    }
} else {
    control.to_label("code1");
}
--

%% code0

既然不应该有第四行，那么把它去就好了。
大部分的问题就是这么简单。
“下次注意一点就好了。”
我一边这样对自己说着
一边自信的做了修改。
重新运行程序...

...结果现在什么都不显示了。看来问题不在这里。

%%->codeblock

%% code1

真不知道我怎么会写出这样的代码。
我应该清楚的记得这个问题才对。

虽然说是参数的问题，
实质上这是因为这里使用的语言本身的特性，
闭包在捕捉外部作用域中的变量时是做的晚绑定。
要得到正确的结果，必须将每一行作为参数传入。

我做出了对应的修改，重新运行了程序...

...正确的结果被显示了出来。
我坐直了身体，
握拳挥向空中。

--
control.jump_to('goodprogrammer');
--

%% code2

计算机发展了这么多年，
出现了够战胜国际象棋大师的深蓝，
也出现了够参加电视节目的华生，
但程序员仍然还在为是否多了还是少了一个分号困扰。

我这样感叹着，
给代码加上了分号，重新运行了程序...

...然而运行结果没有任何变化。看来问题不在这里。

%%->codeblock

%% code3

你知道“魔数”吗？

在程序的世界里，魔数专指代码中出现的莫名的数字。
就算这段程序是你写的，
一段时间后你很难通过仅仅通过某个数字来判断出它的意义。

还是要遵守好的编程习惯啊。
我感叹到，把 3 改成了数组的长度。
满怀期待的重新运行了程序...

...结果现在什么都不显示了。看来问题不在这里。

%%->codeblock

% goodprogrammer

这种简单的小问题果然难不倒我。
一瞬间，我感到非常的自信，
视线穿过屏幕，
看见了世界的构造，
和在底层不断移动的二进制代码。

...
不知不觉就睡着了。
醒来的时候已经是早晨了。
今天是周一，
本周应该是今年最后一周工作日了。

半小时后到达了公司。
我打开浏览器，浏览分配下来的任务。
“一口气跟今年的工作做个了结吧！”
我这样想着，
开始专心的编写代码。

(完) - 程序员篇 Good Ending

*?* 重新开始

--
control.reset();
--

% badprogrammer

看了看时钟，
我已经在这个愚蠢的问题上花费了一个小时了。
这明明应该是个简单的小问题，
居然在这里浪费了这么多的时间。
我站起来来回渡步，
感觉十分懊恼。

...
昨天的那个问题始终没有解决。
今天是周一，
本周应该是今年最后一周工作日了。

半小时后到达了公司。
我打开浏览器，浏览分配下来的任务。
最近工作效率一直有些问题，
之前累计下来的工作不少，
现在项目进度加快又分配下来不少活。

“说不定我根本不适合做程序员啊，找找机会转行做别的吧...”
我叹了一口气。

仔细想了想，
听同事说年底公司要裁员。
虽然室内暖气开的很足，
我还是不禁打了个寒颤。

今年冬天果然特别的冷。


(完) - 程序员篇 Bad Ending

*?* 重新开始

--
control.reset();
--


